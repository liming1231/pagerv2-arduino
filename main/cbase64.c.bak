#include <stdio.h>
#include <stdlib.h>
#include "cbase64.h"

static const char *ALPHA_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

char *cbase64_encode(const char *buf, const long size, char *base64Char) {
  int a = 0;
  int i = 0;
  while (i < size) {
    char b0 = buf[i++];
    char b1 = (i < size) ? buf[i++] : 0;
    char b2 = (i < size) ? buf[i++] : 0;

    int int63 = 0x3F;   //  00111111
    int int255 = 0xFF;  // 11111111
    base64Char[a++] = ALPHA_BASE[(b0 >> 2) & int63];
    base64Char[a++] = ALPHA_BASE[((b0 << 4) | ((b1 & int255) >> 4)) & int63];
    base64Char[a++] = ALPHA_BASE[((b1 << 2) | ((b2 & int255) >> 6)) & int63];
    base64Char[a++] = ALPHA_BASE[b2 & int63];
  }
  switch (size % 3) {
    case 1:
      base64Char[--a] = '=';
    case 2:
      base64Char[--a] = '=';
  }
  return base64Char;
}

char *cbase64_decode(const char *base64Char, const long base64CharSize, char *originChar, long originCharSize) {
  int toInt[128] = { -1 };
  for (int i = 0; i < 64; i++) {
    toInt[ALPHA_BASE[i]] = i;
  }
  int int255 = 0xFF;
  int index = 0;
  for (int i = 0; i < base64CharSize; i += 4) {
    int c0 = toInt[base64Char[i]];
    int c1 = toInt[base64Char[i + 1]];
    originChar[index++] = (((c0 << 2) | (c1 >> 4)) & int255);
    if (index >= originCharSize) {
      return originChar;
    }
    int c2 = toInt[base64Char[i + 2]];
    originChar[index++] = (((c1 << 4) | (c2 >> 2)) & int255);
    if (index >= originCharSize) {
      return originChar;
    }
    int c3 = toInt[base64Char[i + 3]];
    originChar[index++] = (((c2 << 6) | c3) & int255);
  }
  return originChar;
}

#define BASE64_PAD '='
#define BASE64DE_FIRST '+'
#define BASE64DE_LAST 'z'

/* BASE 64 encode table */
static const char base64en[] = {
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z',
  '0',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '+',
  '/',
};

/* ASCII order for BASE 64 decode, 255 in unused character */
static const unsigned char base64de[] = {
  /* nul, soh, stx, etx, eot, enq, ack, bel, */
  255, 255, 255, 255, 255, 255, 255, 255,

  /*  bs,  ht,  nl,  vt,  np,  cr,  so,  si, */
  255, 255, 255, 255, 255, 255, 255, 255,

  /* dle, dc1, dc2, dc3, dc4, nak, syn, etb, */
  255, 255, 255, 255, 255, 255, 255, 255,

  /* can,  em, sub, esc,  fs,  gs,  rs,  us, */
  255, 255, 255, 255, 255, 255, 255, 255,

  /*  sp, '!', '"', '#', '$', '%', '&', ''', */
  255, 255, 255, 255, 255, 255, 255, 255,

  /* '(', ')', '*', '+', ',', '-', '.', '/', */
  255, 255, 255, 62, 255, 255, 255, 63,

  /* '0', '1', '2', '3', '4', '5', '6', '7', */
  52, 53, 54, 55, 56, 57, 58, 59,

  /* '8', '9', ':', ';', '<', '=', '>', '?', */
  60, 61, 255, 255, 255, 255, 255, 255,

  /* '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', */
  255, 0, 1, 2, 3, 4, 5, 6,

  /* 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', */
  7, 8, 9, 10, 11, 12, 13, 14,

  /* 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', */
  15, 16, 17, 18, 19, 20, 21, 22,

  /* 'X', 'Y', 'Z', '[', '\', ']', '^', '_', */
  23, 24, 25, 255, 255, 255, 255, 255,

  /* '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', */
  255, 26, 27, 28, 29, 30, 31, 32,

  /* 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', */
  33, 34, 35, 36, 37, 38, 39, 40,

  /* 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', */
  41, 42, 43, 44, 45, 46, 47, 48,

  /* 'x', 'y', 'z', '{', '|', '}', '~', del, */
  49, 50, 51, 255, 255, 255, 255, 255
};

unsigned int
base64_encode(const unsigned char *in, unsigned int inlen, char *out) {
  int s;
  unsigned int i;
  unsigned int j;
  unsigned char c;
  unsigned char l;

  s = 0;
  l = 0;
  for (i = j = 0; i < inlen; i++) {
    c = in[i];

    switch (s) {
      case 0:
        s = 1;
        out[j++] = base64en[(c >> 2) & 0x3F];
        break;
      case 1:
        s = 2;
        out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
        break;
      case 2:
        s = 0;
        out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
        out[j++] = base64en[c & 0x3F];
        break;
    }
    l = c;
  }

  switch (s) {
    case 1:
      out[j++] = base64en[(l & 0x3) << 4];
      out[j++] = BASE64_PAD;
      out[j++] = BASE64_PAD;
      break;
    case 2:
      out[j++] = base64en[(l & 0xF) << 2];
      out[j++] = BASE64_PAD;
      break;
  }

  out[j] = 0;

  return j;
}

unsigned int
base64_decode(const char *in, unsigned int inlen, unsigned char *out) {
  unsigned int i;
  unsigned int j;
  unsigned char c;

  if (inlen & 0x3) {
    return 0;
  }

  for (i = j = 0; i < inlen; i++) {
    if (in[i] == BASE64_PAD) {
      break;
    }
    if (in[i] < BASE64DE_FIRST || in[i] > BASE64DE_LAST) {
      return 0;
    }

    c = base64de[(unsigned char)in[i]];
    if (c == 255) {
      return 0;
    }

    switch (i & 0x3) {
      case 0:
        out[j] = (c << 2) & 0xFF;
        break;
      case 1:
        out[j++] |= (c >> 4) & 0x3;
        out[j] = (c & 0xF) << 4;
        break;
      case 2:
        out[j++] |= (c >> 2) & 0xF;
        out[j] = (c & 0x3) << 6;
        break;
      case 3:
        out[j++] |= c;
        break;
    }
  }

  return j;
}